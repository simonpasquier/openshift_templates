apiVersion: template.openshift.io/v1
kind: Template

metadata:
  name: prometheus
  annotations:
    "openshift.io/display-name": Prometheus with alerts in ES
    description: |
      A monitoring solution to get metrics and alerts for applications running in a namespace.
      Alerts will be stored in Elasticsearch.
    iconClass: icon-cogs
    tags: "monitoring,prometheus,time-series"

parameters:
- description: The namespace where to deploy the Prometheus service.
  name: NAMESPACE
  required: true
- description: The Prometheus service account (must be created beforehand).
  name: PROMETHEUS_SA
  value: prometheus
- description: The location of the Prometheus image.
  name: IMAGE_PROMETHEUS
  value: prom/prometheus:v2.0.0
- description: The location of the AlertManager image.
  name: IMAGE_ALERTMANAGER
  value: prom/alertmanager:v0.13.0
- description: The location of the Elasticsearch image.
  name: IMAGE_ELASTICSEARCH
  value: docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.2
- description: The location of the alertmanager2es image.
  name: IMAGE_ALERTMANAGER2ES
  value: simonpasquier/alertmanager2es:latest

objects:
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: prometheus
    name: prometheus
    namespace: "${NAMESPACE}"
  spec:
    ports:
    - name: prometheus
      port: 80
      protocol: TCP
      targetPort: 9090
    selector:
      app: prometheus

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: prometheus
    name: alertmanager
    namespace: "${NAMESPACE}"
  spec:
    ports:
    - name: alertmanager
      port: 80
      protocol: TCP
      targetPort: 9093
    selector:
      app: prometheus

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: elasticsearch
    name: elasticsearch
    namespace: "${NAMESPACE}"
  spec:
    ports:
    - name: elasticsearch
      port: 9200
      protocol: TCP
      targetPort: 9200
    selector:
      app: elasticsearch

- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: prometheus
    name: prometheus
    namespace: "${NAMESPACE}"
  spec:
    to:
      name: prometheus

- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: prometheus
    name: alertmanager
    namespace: "${NAMESPACE}"
  spec:
    to:
      name: alertmanager

- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: prometheus
    name: elasticsearch
    namespace: "${NAMESPACE}"
  spec:
    to:
      name: elasticsearch

- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    labels:
      app: elasticsearch
    name: elasticsearch
    namespace: "${NAMESPACE}"
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: elasticsearch
    template:
      metadata:
        labels:
          app: elasticsearch
        name: elasticsearch
      spec:
        containers:
        - name: elasticsearch
          env:
          - name: ES_JAVA_OPTS
            value: "-Xms512m -Xmx512m"
          image: "${IMAGE_ELASTICSEARCH}"
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 9200
            name: web
            protocol: TCP
          - containerPort: 9300
            name: transport
            protocol: TCP

- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    labels:
      app: prometheus
    name: prometheus
    namespace: "${NAMESPACE}"
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: prometheus
    template:
      metadata:
        labels:
          app: prometheus
        name: prometheus
      spec:
        serviceAccountName: "${PROMETHEUS_SA}"
        containers:
        - name: prometheus
          args:
          - --storage.tsdb.retention=6h
          - --config.file=/etc/prometheus/prometheus.yml
          - --web.enable-admin-api
          image: ${IMAGE_PROMETHEUS}
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - mountPath: /etc/prometheus
            name: prometheus-config
          - mountPath: /prometheus
            name: prometheus-data
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 10
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 10
        - name: alertmanager
          args:
          - --config.file=/etc/alertmanager/alertmanager.yml
          image: "${IMAGE_ALERTMANAGER}"
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 9093
            name: web
            protocol: TCP
          volumeMounts:
          - mountPath: /etc/alertmanager
            name: alertmanager-config
          - mountPath: /alertmanager
            name: alertmanager-data
        - name: alertmanager2es
          args:
          - --esURL=http://elasticsearch:9200
          - --addr=0.0.0.0:9097
          image: "${IMAGE_ALERTMANAGER2ES}"
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 9097
            name: web
            protocol: TCP
        initContainers:
        - name: create-alertmanager2es-template
          image: byrnedo/alpine-curl
          args:
          -  --retry
          - "3"
          - --retry-delay
          - "10"
          - --request
          - PUT
          - --data
          - "@/etc/alertmanager2es/template.json"
          - --verbose
          - http://elasticsearch:9200/_template/alertmanager2es
          volumeMounts:
          - mountPath: /etc/alertmanager2es
            name: alertmanager2es-config
        restartPolicy: Always
        volumes:
        - configMap:
            defaultMode: 420
            name: app-monitoring
          name: prometheus-config
        - configMap:
            defaultMode: 420
            name: alertmanager-config
          name: alertmanager-config
        - configMap:
            defaultMode: 420
            name: alertmanager2es-config
          name: alertmanager2es-config
        - emptyDir: {}
          name: prometheus-data
        - emptyDir: {}
          name: alertmanager-data

- apiVersion: v1
  kind: ConfigMap
  metadata:
    label:
      app: prometheus
    name: app-monitoring
    namespace: "${NAMESPACE}"
  data:
    prometheus.rules: |
      groups:
      - name: example-rules
        interval: 30s # defaults to global interval
        rules:
        - alert: Target Down
          expr: up == 0
          for: 1m
          annotations:
            severity: "Critical"
            message: "Instance {{ $labels.instance }} for job {{ $labels.job }} is down"

    prometheus.yml: |
      rule_files:
        - 'prometheus.rules'

      alerting:
        alertmanagers:
        - scheme: http

          kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
              - "${NAMESPACE}"

          relabel_configs:
          - source_labels:
            - __meta_kubernetes_service_name
            - __meta_kubernetes_endpoint_ready
            action: keep
            regex: alertmanager;true

      scrape_configs:
      - job_name: 'prometheus'
        static_configs:
        - targets: ['localhost:9090']

      - job_name: 'alertmanager'
        static_configs:
        - targets: ['localhost:9093']

      - job_name: 'alertmanager2es'
        static_configs:
        - targets: ['localhost:9097']

      - job_name: 'endpoints'
        tls_config:
          insecure_skip_verify: true

        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - "${NAMESPACE}"

        relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_endpoint_ready]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          action: replace
          target_label: __scheme__
          regex: (https?)
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: (.+)(?::\d+);(\d+)
          replacement: $1:$2
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_username]
          action: replace
          target_label: __basic_auth_username__
          regex: (.+)
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_password]
          action: replace
          target_label: __basic_auth_password__
          regex: (.+)
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: service_name

- apiVersion: v1
  kind: ConfigMap
  metadata:
    label:
      app: prometheus
    name: alertmanager-config
    namespace: "${NAMESPACE}"
  data:
    alertmanager.yml: |
      global:
        resolve_timeout: 5m

      # The root route on which each incoming alert enters.
      route:
        receiver: alertmanager2es
        group_by: [job]
        group_interval: 10s
        group_wait: 1m
        repeat_interval: 1h

      receivers:
      - name: alertmanager2es
        webhook_configs:
        - url: http://localhost:9097/webhook

- apiVersion: v1
  kind: ConfigMap
  metadata:
    label:
      app: prometheus
    name: alertmanager2es-config
    namespace: "${NAMESPACE}"
  data:
    template.json: |-
      {
        "template": "alertmanager-2*",
        "settings": {
          "number_of_shards": 1,
          "number_of_replicas": 1,
          "index.refresh_interval": "10s",
          "index.query.default_field": "groupLabels.alertname"
        },
        "mappings": {
          "_default_": {
            "_all": {
              "enabled": false
            },
            "properties": {
              "@timestamp": {
                "type": "date",
                "doc_values": true
              }
            },
            "dynamic_templates": [
              {
                "string_fields": {
                  "match": "*",
                  "match_mapping_type": "string",
                  "mapping": {
                    "type": "string",
                    "index": "not_analyzed",
                    "ignore_above": 1024,
                    "doc_values": true
                  }
                }
              }
            ]
          }
        }
      }
