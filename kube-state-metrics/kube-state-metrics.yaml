apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: kube-state-metrics
  annotations:
    "openshift.io/display-name": Kubenertes state metrics
    description: |
      A service for collecting state metrics from Kubernetes clusteres.
    iconClass: icon-cogs
    tags: "monitoring,prometheus,time-series"
parameters:
- description: The namespace to instantiate kube-state-metrics under. Defaults to 'kube-system'.
  name: NAMESPACE
  value: kube-system
- description: The location of the proxy image
  name: IMAGE_PROXY
  value: openshift/oauth-proxy:v1.0.0
- description: The location of the kube-state-metrics image
  name: IMAGE_KUBE_STATE_METRICS
  value: gcr.io/google_containers/kube-state-metrics:v1.1.0
- description: The session secret for the proxy
  name: SESSION_SECRET
  generate: expression
  from: "[a-zA-Z0-9]{43}"
objects:
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: kube-state-metrics
    namespace: "${NAMESPACE}"
- apiVersion: v1
  kind: ClusterRole
  metadata:
    name: kube-state-metrics
  rules:
  - apiGroups: [""]
    resources:
    - nodes
    - pods
    - services
    - resourcequotas
    - replicationcontrollers
    - limitranges
    - persistentvolumeclaims
    - namespaces
    verbs: ["list", "watch"]
  - apiGroups: ["extensions"]
    resources:
    - daemonsets
    - deployments
    - replicasets
    verbs: ["list", "watch"]
  - apiGroups: ["apps"]
    resources:
    - statefulsets
    verbs: ["list", "watch"]
  - apiGroups: ["batch"]
    resources:
    - cronjobs
    - jobs
    verbs: ["list", "watch"]
- apiVersion: v1
  kind: ClusterRoleBinding
  metadata:
    name: kube-state-metrics
  roleRef:
    kind: ClusterRole
    name: kube-state-metrics
  subjects:
  - kind: ServiceAccount
    name: kube-state-metrics
    namespace: "${NAMESPACE}"

- apiVersion: v1
  kind: Service
  metadata:
    name: kube-state-metrics
    namespace: "${NAMESPACE}"
    labels:
      app: kube-state-metrics
    annotations:
      prometheus.io/scrape: 'true'
  spec:
    ports:
    - name: http-metrics
      port: 8080
      targetPort: http-metrics
      protocol: TCP
    selector:
      app: kube-state-metrics

- apiVersion: apps/v1beta1
  kind: Deployment
  metadata:
    name: kube-state-metrics
    namespace: "${NAMESPACE}"
  spec:
    selector:
      matchLabels:
        app: kube-state-metrics
    replicas: 1
    template:
      metadata:
        labels:
          app: kube-state-metrics
      spec:
        serviceAccountName: kube-state-metrics
        containers:
        - name: kube-state-metrics
          image: "${IMAGE_KUBE_STATE_METRICS}"
          ports:
          - name: http-metrics
            containerPort: 8080
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 5
            timeoutSeconds: 5
